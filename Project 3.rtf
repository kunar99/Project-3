{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
When the window is closed, the efficiency values should be computed with values of n from 0 to 10 and written to a text file outData.txt. Each line of the file should contain the value of n, the efficiency of the iterative method for that value of n and the efficiency of the recursive method. The values should be separated by commas so the file can be opened with Excel and used to graph the value of the efficiencies for both the iterative and recursive options along the y axis with the value of n along the x-axis. The graph should be included in the solution description document that accompanies this project and should also contain a brief explanation of the observed results.\cb1 \
\cb3 The program should consist of two classes. The first class should define the GUI and should be hand-coded and not generated by a GUI generator. In addition to the main method and a constructor to build the GUI, an event handler will be needed to handle the Compute button click and another handler will be needed to produce the file described above when the window is closed. The latter handler should be an object of an inner class that extends the WindowAdapter class.\cb1 \
\cb3 The other class should be named Sequence. It should be a utility class meaning that all its methods must be class (static) methods and no objects should be able to be generated for that class. It should contain three public methods:\cb1 \
\cb3 1. The first method computeIterative should accept a value of n and return the corresponding element in the sequence using iteration.\cb1 \
\cb3 2. The second method computeRecursive should accept a value of n and return the corresponding element in the sequence using recursion.\cb1 \
\cb3 3. The third method getEfficiency will return the efficiency counter left behind by the previous call to either of the above two methods.\cb1 \
\cb3 Be sure that all instance and class variables are declared as private. Also any exceptions thrown by non-numeric inputs should be properly handled.\cb1 \
\cb3 This is what I got so far. If my code needs to be changed please show me where.\cb1 \
\cb3 // SequenceGUI.java\cb1 \
\cb3 import java.io.*;\cb1 \
\cb3 import java.awt.*;\cb1 \
\cb3 import java.awt.event.*;\cb1 \
\cb3 import javax.swing.*;\cb1 \
\cb3 public class SequenceGUI extends JFrame implements ActionListener\cb1 \
\cb3 \{\cb1 \
\cb3 \'a0\'a0 //declare variables for GUI\cb1 \
\cb3 \'a0\'a0 JRadioButton IterativeRB, RecursiveRB;\cb1 \
\cb3 \'a0\'a0 JButton ComputeJB;\cb1 \
\cb3 \'a0\'a0 JLabel EnterN, Result, Efficiency;\cb1 \
\cb3 \'a0\'a0 JTextField EnterNField, ResultField, EfficiencyFeild;\cb1 \
\cb3 \'a0\'a0 JPanel Panel = new JPanel();\cb1 \
\
\cb3 \'a0\'a0 int IterationCount = 0, RecursiveCount = 0;\cb1 \
\
\cb3 \'a0\'a0 public SequenceGUI()\cb1 \
\cb3 \'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 Panel = new JPanel(new GridLayout(6, 5, 10, 20));\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // first radio button named Iterative\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 IterativeRB = new JRadioButton("Iterative");\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0\cb1 \
\
\cb3 \'a0\'a0 \'a0\'a0\'a0 // Second radio button named Recursive\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 RecursiveRB = new JRadioButton("Recursive");\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 ButtonGroup chooseRB = new ButtonGroup();\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 chooseRB.add(IterativeRB);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 chooseRB.add(RecursiveRB);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 Panel.add(new JLabel());\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // adds the IterativeRB button\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 Panel.add(IterativeRB);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 Panel.add(new JLabel());\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // adds the RecursiveRB button\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 Panel.add(RecursiveRB);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // create the label Enter n:\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 EnterN = new JLabel("Enter n: ");\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // creates the first text field to enter the value for n\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 EnterNField = new JTextField();\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // adds the label Enter n\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 Panel.add(EnterN);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // adds the field to enter the value of N\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 Panel.add(EnterNField);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // creates the compute button\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 ComputeJB = new JButton("Compute");\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 Panel.add(new JLabel());\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // adds the computeJB button\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 Panel.add(ComputeJB);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // create the label Result:\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 Result = new JLabel("Result: ");\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // creates the displayed field of result\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 ResultField = new JTextField();\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // adds the label Result:\'a0\'a0 \'a0\'a0\'a0\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 Panel.add(Result);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // adds the field to display the results of n\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 Panel.add(ResultField);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // create the label Efficiency:\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 Efficiency = new JLabel("Efficiency: ");\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // creates the displayed field of efficiency\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 EfficiencyFeild = new JTextField();\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // adds the label Efficiency\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 Panel.add(Efficiency);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 // adds the displayed field of efficiency\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 Panel.add(EfficiencyFeild);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 add(Panel);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 //add action listener to the button\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 ComputeJB.addActionListener(this);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 //create an object to the inner class WindowAdpaterImplementation\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 WindowAdapterImplementations wai = new WindowAdapterImplementations();\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 //invoke the add\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 addWindowListener(wai);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \}\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 //inner class\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 //WindowAdapter class that writes the data into the .csv file\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 class WindowAdapterImplementations extends WindowAdapter\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 public void windowClosing(WindowEvent e)\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 try\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 FileWriter dataOutput = new FileWriter("outData.txt");\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 //prepare header\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dataOutput.append("n");\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 // comma inserted to help the excel program to add a column\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dataOutput.append(',');\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dataOutput.append("Recursive");\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 // comma inserted to help the excel program to add a column\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dataOutput.append(',');\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dataOutput.append("Iterative");\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 // comma inserted to help the excel program to add a column\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dataOutput.append(',');\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dataOutput.append('\\n');\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 for (int i = 0; i <= 10; i++)\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dataOutput.append(String.valueOf(i));\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dataOutput.append(',');\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Sequence.computeRecursive(i);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dataOutput.append(String.valueOf(Sequence.getEfficiency()));\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dataOutput.append(',');\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 Sequence.computeIterative(i);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dataOutput.append(String.valueOf(Sequence.getEfficiency()));\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dataOutput.append('\\n');\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dataOutput.flush();\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dataOutput.close();\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 catch (Exception ae)\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 System.err.println("Unable to write to the file"+ae.getMessage()+ " ");\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 System.exit(0);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \}\cb1 \
\cb3 \'a0\'a0 \}\cb1 \
\
\cb3 \'a0\'a0 \'a0\'a0\'a0 \}\cb1 \
\cb3 //main method\cb1 \
\cb3 public static void main(String args[])\cb1 \
\cb3 \{\cb1 \
\cb3 //create an object to the SequenceGUI\cb1 \
\cb3 SequenceGUI sequenceObject = new SequenceGUI();\cb1 \
\cb3 sequenceObject.setVisible(true);\cb1 \
\cb3 sequenceObject.setSize(300, 300);\cb1 \
\cb3 sequenceObject.setTitle("Project 3");\cb1 \
\cb3 \}\cb1 \
\cb3 //actionPerformed method that executes the\cb1 \
\cb3 //operations on button click\cb1 \
\cb3 \'a0\'a0 public void actionPerformed(ActionEvent ae)\cb1 \
\cb3 \'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 if (ComputeJB == ae.getSource())\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 if (IterativeRB.isSelected())\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 int itValue = Integer.parseInt(EnterNField.getText());\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 int iterationVal = Sequence.computeIterative(itValue);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 ResultField.setText(iterationVal + "");\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 IterationCount=Sequence.getEfficiency();\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 EfficiencyFeild.setText(IterationCount + "");\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \}\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 else if (RecursiveRB.isSelected())\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 int recValue = Integer.parseInt(EnterNField.getText());\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 int recursiveVal = Sequence.computeRecursive(recValue);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 ResultField.setText(recursiveVal + "");\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 RecursiveCount=Sequence.getEfficiency();\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 EfficiencyFeild.setText(RecursiveCount + "");\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \}\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \}\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0\cb1 \
\cb3 \}\cb1 \
\cb3 \}\cb1 \
\cb3 //Sequence.java\cb1 \
\cb3 public class Sequence\cb1 \
\cb3 \{\cb1 \
\cb3 \'a0\'a0\'a0\'a0 static int efficencyValue;\cb1 \
\cb3 \'a0\'a0\'a0\'a0 // compute iteration of n\'a0\'a0\'a0\cb1 \
\cb3 \'a0\'a0\'a0\'a0 public static int computeIterative(int n)\cb1 \
\cb3 \'a0\'a0\'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 efficencyValue=0;\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 int value[] = new int[n + 2];\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 value[0] = 0;\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 value[1] = 1;\cb1 \
\cb3 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 for (int i = 2; i <= n; i++)\cb1 \
\cb3 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 efficencyValue++;\cb1 \
\cb3 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 value[i] = 2 * value[i - 1] + value[i - 2];\cb1 \
\cb3 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 \}\cb1 \
\cb3 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 // returns the value of n\cb1 \
\cb3 \'a0\'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 return value[n];\cb1 \
\cb3 \'a0\'a0\'a0\'a0 \}\cb1 \
\cb3 \'a0\'a0\'a0\'a0 // computes the recursion of n\cb1 \
\cb3 \'a0\'a0 public static int computeRecursive(int n)\cb1 \
\cb3 \'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 efficencyValue=0;\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 return recursive(n);\cb1 \
\cb3 \'a0\'a0 \}\cb1 \
\cb3 \'a0\'a0 private static int recursive(int n)\cb1 \
\cb3 \'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 efficencyValue++;\cb1 \
\cb3 \'a0\'a0\'a0\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 if (n == 0)\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 return 0;\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 else if (n == 1)\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 return 1;\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 else\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \'a0\'a0\'a0 return 2 * recursive(n - 1) + recursive(n - 2);\cb1 \
\cb3 \'a0\'a0 \'a0\'a0\'a0 \}\cb1 \
\cb3 \'a0\'a0 \}\cb1 \
\cb3 \'a0\'a0 public static int getEfficiency()\cb1 \
\cb3 \'a0\'a0 \{\cb1 \
\cb3 \'a0\'a0 return efficencyValue;\cb1 \
\cb3 \'a0\'a0 \}\cb1 \
\cb3 \}}